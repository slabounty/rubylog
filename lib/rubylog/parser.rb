#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "grammar.y".
#

require 'racc/parser.rb'

require_relative "node"
require_relative "lexer"
module Rubylog
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 77)
def parse(input)
  @tokens = Rubylog::Lexer.new.tokenize(input)
  do_parse
end

def next_token
  @tokens.shift
end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,    11,    17,    16,     3,     6,    10,    18,    22,    23,
    24,    18,    22,    23,    24,    17,    26,     9,     8,    14,
     8,     8,    14,    28,    29 ]

racc_action_check = [
     2,     5,    12,    12,     1,     2,     5,    14,    14,    14,
    14,    29,    29,    29,    29,    15,    15,     3,     6,     8,
    11,    17,    18,    19,    20 ]

racc_action_pointer = [
   nil,     4,    -2,    17,   nil,    -5,    16,   nil,    11,   nil,
   nil,    18,    -8,   nil,     5,     5,   nil,    19,    14,    14,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,
   nil ]

racc_action_default = [
    -2,   -20,    -1,   -20,    -3,   -20,   -20,    -7,   -20,    31,
    -4,   -20,   -20,    -8,   -11,   -20,    -6,   -20,   -16,   -20,
   -12,   -13,   -15,   -17,   -18,   -19,    -5,    -9,   -10,   -20,
   -14 ]

racc_goto_table = [
     7,    21,    12,     1,     2,     4,     5,    15,    19,    20,
   nil,   nil,    25,   nil,   nil,    27,    30,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25 ]

racc_goto_check = [
     6,     9,     5,     1,     2,     3,     4,     5,     7,     8,
   nil,   nil,     6,   nil,   nil,     6,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,     3,     4,     3,     4,    -4,    -2,    -6,    -5,   -13 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_1,
  0, 14, :_reduce_2,
  2, 14, :_reduce_3,
  2, 15, :_reduce_4,
  4, 15, :_reduce_5,
  3, 15, :_reduce_6,
  1, 16, :_reduce_7,
  1, 17, :_reduce_8,
  3, 17, :_reduce_9,
  4, 18, :_reduce_10,
  0, 19, :_reduce_11,
  1, 19, :_reduce_12,
  1, 20, :_reduce_13,
  3, 20, :_reduce_14,
  1, 21, :_reduce_15,
  1, 21, :_reduce_16,
  1, 21, :_reduce_17,
  1, 21, :_reduce_18,
  1, 21, :_reduce_19 ]

racc_reduce_n = 20

racc_shift_n = 31

racc_token_table = {
  false => 0,
  :error => 1,
  :ATOM => 2,
  :VARIABLE => 3,
  :NUMBER => 4,
  :STRING => 5,
  :NECK => 6,
  :QUERY => 7,
  :LPAREN => 8,
  :RPAREN => 9,
  :COMMA => 10,
  :DOT => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "ATOM",
  "VARIABLE",
  "NUMBER",
  "STRING",
  "NECK",
  "QUERY",
  "LPAREN",
  "RPAREN",
  "COMMA",
  "DOT",
  "$start",
  "program",
  "clauses",
  "clause",
  "head",
  "body",
  "predicate",
  "args_opt",
  "args",
  "term" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 8)
  def _reduce_1(val, _values, result)
     result = Rubylog::Node.new(:program, *val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 13)
  def _reduce_2(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 15)
  def _reduce_3(val, _values, result)
     result = val[0] + [val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 20)
  def _reduce_4(val, _values, result)
     result = Rubylog::Node.new(:fact, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 22)
  def _reduce_5(val, _values, result)
     result = Rubylog::Node.new(:rule, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_6(val, _values, result)
     result = Rubylog::Node.new(:query, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 29)
  def _reduce_7(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_8(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_9(val, _values, result)
     result = Rubylog::Node.new(:and, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_10(val, _values, result)
     result = Rubylog::Node.new(:predicate, val[0], *val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_11(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_12(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_13(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_14(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_15(val, _values, result)
     result = Rubylog::Node.new(:variable, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = Rubylog::Node.new(:atom, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_17(val, _values, result)
     result = Rubylog::Node.new(:number, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_18(val, _values, result)
     result = Rubylog::Node.new(:string, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_19(val, _values, result)
     result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Rubylog
